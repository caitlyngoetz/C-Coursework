*******************************
*Project 5:
*Class: CompSci 253-001
*Date: April 24, 2015
*Name: Caitlyn Goetz
*******************************

OVERVIEW:
	This program takes in the number of threads and random numbers that the user wants to generate.  It then uses the 
	threads to create the amount of random numbers.

INCLUDED FILES:
	*seq-random.c - file that contains code that was the basis of theard-random.  Uses thread one thread to do a process.
	*thread-random.c - Uses multiple threads to complete a process.
	*timing.c - keeps the timing for th threads so that they know when they can join together and when to start.
	*Makefile - creates the executable and compiles the files for the project.  Also cleans up when done.
	*README - this file.

BUILDING AND RUNNING:
	From the directory containing the source files type the following in the command line to compile the project:
		$make

	You can run the program by using the executable and typing the arguments for the following command:
		$thread-random <numberOfRandoms> <numThreads>

	Where numberOfRandoms is the amount of random numbers that the program should generate.
	And where numThreads is the amount of threads you want generated.

PROGRAM DESIGN:

	This program reads in the number of threads that the user wants the program to use and the amount of random numbers
	that they want generated.  Then the program creats that many amount of threads in order to speed up the process of 
	making the random numbers.  Since they share the load the program does run faster.

PROGRAM DEVELOPMENT AND TESTING DISSCUSSION:
	I wasn't quite sure what the thread-random program wanted.  The write-up wasn't very difficult to read but it was hard
	to understand what it wanted from me.  If a skeleton code was supplied or a specification of what was needed to pass
	in as arguements for the methods would have been a lot better.  Other than that it went fairly smoothly once I got
	over my procrastination and the wonderful weather outside :)

PERFORMANCE:
	seq-random 2000000000 
	Elasped time: 0.679372 seconds

	thread-random 2000000000 1
	Elasped time: 0.000044 seconds

	thread-random 2000000000 2
	Elasped time: 0.000052 seconds

	thread-random 2000000000 5
	Elasped time: 0.000036 seconds

	thread-random 2000000000 10
	Elasped time: 0.000032 seconds

	thread-random 2000000000 50
	Elasped time: 0.000060 seconds

	thread-random 2000000000 100
	Elasped time: 0.000061 seconds

	thread-random 2000000000 500
	Elasped time: 0.000091 seconds

	thread-random 2000000000 1000
	Elasped time: 0.000065 seconds

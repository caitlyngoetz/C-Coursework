*****************************************
*Project 4: Self-Organizing-List
*Class: CompSci 253-001
*Date: April 3, 2014	
*Name: Caitlyn Goetz
*****************************************

OVERVIEW:

	This program implements a doubly-linked list using nodes and generic objects and allows the user to choose
	if they want a standard list or a self-organizing list.

INCLUDED FILES:
	
	*doxygen-config - helps the program run like expected with the libraries.
	*Makefile - the main Makefile that will compile all of the other libraries and place files in the right
		    places.
	*README - holds the documentation for this project that I made.  (this file)	
	
	In the library called include:
		*This should be empty until the program is compiled then the included headers in the program
		will be passed into this directory.

	In the library called lib:
		*This should be empty until the program is compiled then the included libraries in the program 
		will be passed into this directory.

	In the library called libsrc:
		*List.c - where the main code for the doubly-linked list is located 
		*List.h - the header file for List.c that contains the method names of the methods in List.c
		*Makefile - the Makefile for this library/directory so that the contents can be compiled
		*Node.c - where the main code for the creation of the nodes is located
		*Node.h - the header file for Node.c that contains the method names of the methods in Node.c 
	
	In the library called testsuite:
		*Makefile - the Makefile for this library/directory so that the contents can be compiled
		*Object.c - holds the code for creating objects to be held in the nodes for testing
		*Object.h - the header file for Object.c that contains the method names of the methods in Object.c
		*RandomTestList.c - holds the code for testing the doubly-linked list against
		*SimpleTestList.c - holds the code for testing the doubly-linked list against
		*UnitTestList.c - holds the extensive testing for the doubly-linked list

	In the library called self-organizing-list
		*doxygen-config - helps the program run like expected with the libraries.
		*Makefile - the Makefile for this library/directory so that the contencts can be complied
		*wf.c - the driver program.  Makes the list and sorts through the file and outputs the list.
		*wftest.sh - script that compares outputs of the list to the expected outputs
		*WordObj.c - makes a word object so that it can be added to the list
		*WordObj.h - defines the methods and variables for WordObj.c
	

BUILDING AND RUNNING:

	From the directory containing the source files type the following in the command line to compile the project:
		$make
	
	After that you can set up your console to run the program by typing this in the command line:
		export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./lib:./lib

	Finally you can run the program by using the test file called UnitTestList by typing this in the command line:	
		$./self-organizing-list/wf {--self-organized-list|--std-list} <textfile>

PROGRAM DESIGN:

	This program reads in a file line by line and then it takes the words and puts them into a list.  If the word
	has already been added to the list then the frequency of that word is incremented and then it is moved to 
	the front of the list.  For standard list, the list is then printed out with the word and its frequency
	next to each other.  If the user specifies that the self-organizing list is suppose to be use, the list
	then prints out that list which was made from the more frequent ones in the front.
	
	The wftest.sh compares the list with sample output by sorting the list by frequency first then by word
	alphabetically.

PROGRAM DEVELOPMENT AND TESTING DISCUSSION:
		
	This was a surprisingly difficult program once I got into it.  It was easy to get it started and going but
	then these weird, obscure bugs kept popping up and it made it extremely hard to debug.  I spent hours on it
	and ended up turning it in late just becasue of the crap it was doing :(  needless to say I was extremely 
	happy when I finally did get it done and there were several times I though about just turning in the junk
	and going home. 

	

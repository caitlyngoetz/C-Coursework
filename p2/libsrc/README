*****************************************
*Project:
*Class: CompSci 253-001
*Date: March 6, 2015	
*Name: Caitlyn Goetz
*****************************************

OVERVIEW:

	This program implements a doubly-linked list using nodes and generic objects.

INCLUDED FILES:

	

BUILDING AND RUNNING:

	From the directory containing the source files type the following in the command line to compile the project:
	$make
	
	After that you can set up your console to run the program by typing this in the command line:

	Finally you can run the program by using the test file called UnitTestList by typing this in the command line:	
	$testsuite/UnitTestList

PROGRAM DESIGN:

	This program takes objects and makes a double-linked list out of several objects.  It is split into 
	different libraries so there is a testing library as well as a libsrc library where the main code is 
	stored.  The other files get filled and put into use when the compiling happens.  Most of the code that
	does the work is in List.c with the header file as List.h.  The methods for the double-linked list are 
	implemented in that file including addToFront, addToRear, remove and others.  In the testsuite directory
	there are different tests.  UnitTestList.c is the most comprehensive testing and this is the file that 
	runs the double-linked list.  It tests to make sure that all the individual methods work and it also checks
	for user errors that might be entered such as a NULL list or NULL objects.

PROGRAM DEVELOPMENT AND TESTING DISCUSSION:

	This lab was one of the easiest that I have done in my CompSci career.  I knew what was going on and I 
	understood what I was suppose to be doing.  It was a great confidence booster.  I had a little bit of
	a problem understanding valgrind and how all the libraries worked together but that is because I hadn't
	been exposed to that before.  After I worked that out, I really enjoyed this project and it was somewhat
	of a nice break from the usual mindnumbing confusion that usually comes with doing projects.  It was also
	nice to remain constantly working on the project and not have to stop for help or take a break because I
	didn't understand.  I wish more projects were like this!  (I am sure once I get a handle on this that other
	projects will become this way)
